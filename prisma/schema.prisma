// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Added standard NextAuth adapter models (Optional but good practice)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? 
  emailVerificationToken String?   @unique 
  verificationTokenExpiry DateTime? 
  stripeCustomerId         String?   @unique 
  stripeSubscriptionId     String?   @unique 
  stripePriceId            String?   
  stripeSubscriptionStatus String?   
  stripeCurrentPeriodEnd   DateTime? 
  password      String?   
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  image         String?
  projects      Project[] @relation("ProjectOwner") 
  sharedPlans   PlanShare[] @relation("PlanShareUser")
  feedback      Feedback[]
  activities    Activity[]
  adminSettings AdminSettings?
  accounts      Account[] 
  sessions      Session[] 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
// Renamed from Plan to Project
model Project {
  id                 String        @id @default(cuid())
  projectName        String        
  projectDescription String?       @db.Text 
  codeEditor         String?       
  targetAudience     String?       @db.Text 
  keyGoals           String?       @db.Text 
  status             ProjectStatus @default(IN_PROGRESS) 
  userId             String        
  user               User          @relation("ProjectOwner", fields: [userId], references: [id]) 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  sharedWith         PlanShare[]   
  plans              Plan[]        
  feedback           Feedback[]    
  activities         Activity[]    

}

// Renamed from PlanVersion to Plan (represents a version)
model Plan {
  id                  String    @id @default(cuid())
  projectId           String?   
  planType            PlanType? 
  versionNumber       Int?      
  planContent         String?   @db.Text 
  researchData        Json?     
  triggeringFeedbackText String?   @db.Text 
  prompts             Json?     
  oneShotPrompt       String?   
  buildPlanProgress   Json?     
  buildPlanChangelog  Json?     
  buildPlanMetadata   Json?     
  createdAt           DateTime  @default(now())
  project             Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  feedback            Feedback[] 

  @@unique([projectId, versionNumber]) 
  @@index([projectId])
}

model PlanShare {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  projectId   String   
  user        User     @relation("PlanShareUser", fields: [userId], references: [id])
  userId      String
  role        ShareRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions PlanPermission[]

  @@unique([projectId, userId]) 
}

model PlanPermission {
  id          String   @id @default(cuid())
  share       PlanShare @relation(fields: [shareId], references: [id])
  shareId     String
  permission  Permission
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([shareId, permission])
}

model Feedback {
  id                String   @id @default(cuid())
  sectionIdentifier String?  
  originalText      String?  @db.Text 
  userComment       String?  @db.Text 
  projectId         String?  
  project           Project? @relation(fields: [projectId], references: [id]) 
  planId            String   
  plan              Plan     @relation(fields: [planId], references: [id], onDelete: Cascade) 
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([planId])
  @@index([userId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String    @map("project_id")
  project   Project   @relation(fields: [projectId], references: [id])
  planId    String?  @map("plan_id")
  details   String?  @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([planId])
}

model AdminSettings {
  id        String   @id @default(cuid())
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

// Updated AIProvider model
model AIProvider {
  id        String   @id @default(cuid())
  name      String   @unique 
  apiKeyEnvVarName String?  
  baseUrl   String?  
  models    AIModel[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New AIModel model
model AIModel {
  id           String     @id @default(cuid())
  providerId   String
  modelName    String     
  description  String?
  inputCost    Float?     
  outputCost   Float?     
  contextWindow Int?      
  provider     AIProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  prompts      Prompt[]

  @@unique([providerId, modelName])
}

// New Prompt model
model Prompt {
  id          String   @id @default(cuid())
  name        String        
  description String?
  category    PromptCategory @default(GENERAL) 
  template    String   @db.Text 
  variables   Json?     
  status      PromptStatus  @default(ACTIVE) 
  modelId     String?  
  model       AIModel? @relation(fields: [modelId], references: [id], onDelete: SetNull) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, name]) 
}

// Added PlanType enum
enum PlanType {
  INITIAL
  REFINED
}

// Added ProjectStatus enum
enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

// Added UserStatus enum
enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum ShareRole {
  VIEWER
  EDITOR
  ADMIN
}

enum Permission {
  VIEW
  EDIT
  COMMENT
  SHARE
  DELETE
}

// Enum for Prompt Status
enum PromptStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

// Enum for Prompt Category
enum PromptCategory {
  PLAN_GENERATION
  PLAN_REFINEMENT
  DEVELOPMENT
  GENERAL 
}
