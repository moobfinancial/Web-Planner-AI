"use server"

import { revalidatePath } from "next/cache"

// Mock database for demo purposes
const plans = [
  {
    id: "1",
    name: "E-commerce Website",
    description: "An online platform for selling handcrafted jewelry",
    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
    updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
  },
  {
    id: "2",
    name: "Portfolio Site",
    description: "A personal portfolio for a graphic designer",
    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago
    updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago
  },
  {
    id: "3",
    name: "Blog Platform",
    description: "A blog platform for tech enthusiasts",
    createdAt: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000), // 20 days ago
    updatedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago
  },
]

export async function generatePlan(formData: FormData) {
  const name = formData.get("name") as string
  const description = formData.get("description") as string
  const audience = formData.get("audience") as string
  const goals = formData.get("goals") as string

  try {
    // In a real application, you would use AI to generate the plan
    // For demo purposes, we'll create a new plan with the provided information
    const newPlan = {
      id: "4", // In a real app, this would be generated by the database
      name,
      description,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    // Add the new plan to our mock database
    plans.push(newPlan)

    // Revalidate the dashboard page to show the new plan
    revalidatePath("/dashboard")
    revalidatePath("/dashboard/plans")

    return { success: true, plan: newPlan }
  } catch (error) {
    console.error("Error generating plan:", error)
    return { success: false, error: "Failed to generate plan. Please try again." }
  }
}

export async function refinePlan(planId: string, feedback: string, sectionId?: string) {
  try {
    // In a real application, you would:
    // 1. Fetch the existing plan
    // 2. Use AI to refine the specific section based on feedback
    // 3. Save the updated plan as a new version
    // 4. Return the updated plan

    console.log(`Refining plan ${planId}${sectionId ? `, section ${sectionId}` : ""} with feedback: ${feedback}`)

    // For demo purposes, just update the updatedAt timestamp
    const plan = plans.find((p) => p.id === planId)
    if (plan) {
      plan.updatedAt = new Date()
      revalidatePath(`/dashboard/plans/${planId}`)
    }

    return { success: true }
  } catch (error) {
    console.error("Error refining plan:", error)
    return { success: false, error: "Failed to refine plan. Please try again." }
  }
}

export async function generatePrompts(planId: string) {
  try {
    // Implementation would fetch the plan and generate prompts
    return { success: true }
  } catch (error) {
    console.error("Error generating prompts:", error)
    return { success: false, error: "Failed to generate prompts. Please try again." }
  }
}

