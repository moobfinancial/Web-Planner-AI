"use client";

import React from "react";
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Copy, Download, Loader2 } from "lucide-react"; // Added Loader2
import copy from "clipboard-copy"; // Ensure installed: npm install clipboard-copy
import { useToast } from "@/components/ui/use-toast";
import { ImplementationPrompts } from "@/lib/types"; // Import shared type
import { ProgressIndicator } from "@/components/build-plan/ProgressIndicator"; // Import the new component
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"; // Import Tooltip components
// Added imports for One-Shot Prompt UI & Checkbox
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Skeleton } from "@/components/ui/skeleton";
import { Checkbox } from "@/components/ui/checkbox"; // Import Checkbox

// Define props
interface PlanPromptsProps {
  planId: string; // This should be the Project ID
  currentVersionId?: string; // The specific Plan ID (version)
  codeEditor?: string; // Optional: Preferred code editor
}

interface PromptItem {
  title: string;
  promptText: string;
  // Add completion status later
  // completed?: boolean;
}

export function PlanPrompts({ planId, currentVersionId, codeEditor }: PlanPromptsProps) { // Added codeEditor prop
  const { toast } = useToast();
  const [prompts, setPrompts] = useState<ImplementationPrompts | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true); // Loading state for categorized prompts
  const [error, setError] = useState<string | null>(null); // Error state for categorized prompts
  const [isExporting, setIsExporting] = useState(false); // For download button state

  // State for One-Shot Prompt
  const [oneShotPrompt, setOneShotPrompt] = useState<string | null>(null);
  const [isLoadingOneShot, setIsLoadingOneShot] = useState<boolean>(false);
  const [errorOneShot, setErrorOneShot] = useState<string | null>(null);
  const [oneShotFeedback, setOneShotFeedback] = useState<string>("");
  const [isRefining, setIsRefining] = useState<boolean>(false);

  // State for task completion
  const [checkedTasks, setCheckedTasks] = useState<Record<string, boolean>>({});

  // Use the prop directly if available, otherwise undefined
  const [internalCurrentVersionId, setInternalCurrentVersionId] = useState<string | undefined>(currentVersionId);

  // Update internal state if the prop changes (for progress indicator)
  useEffect(() => {
    // Also clear one-shot prompt when version changes, forcing a refetch if tab is active
    setOneShotPrompt(null);
    setErrorOneShot(null);
    setInternalCurrentVersionId(currentVersionId);
    // Reset task completion when version changes
    setCheckedTasks({});
    // TODO: Fetch initial checked state from buildPlanProgress if available
  }, [currentVersionId]);

  // Effect for fetching categorized prompts
  useEffect(() => {
    const fetchCategorizedPrompts = async () => { // Renamed function
      // Use planId (Project ID) for fetching categorized prompts
      if (!planId) { // Check Project ID
          setIsLoading(false); // Stop loading if no project ID
          return;
      };
      setIsLoading(true); // Start loading categorized prompts
      setError(null); // Clear previous errors for categorized prompts
      try {
        // Fetch categorized prompts using Project ID
        // Assuming this endpoint gives prompts for the latest version of the project
        const response = await fetch(`/api/plans/${planId}/prompts`);
        if (!response.ok) {
          let errorData;
          try {
            errorData = await response.json();
          } catch {
            errorData = { message: await response.text() };
          }

          throw new Error(errorData.message || `Failed to fetch categorized prompts (${response.status})`);
        }
        const data: ImplementationPrompts = await response.json();
        setPrompts(data);
        // TODO: Initialize checkedTasks based on fetched progress data if available
        // Example: Fetch progress from GET /api/plans/[versionId]/build
        // if (internalCurrentVersionId) {
        //    const progressRes = await fetch(`/api/plans/${internalCurrentVersionId}/build`);
        //    if (progressRes.ok) {
        //       const progressData = await progressRes.json();
        //       // Assuming progressData contains task status, e.g., { completedTasks: ['Task Title 1'], totalTasks: 5 }
        //       const initialChecked: Record<string, boolean> = {};
        //       progressData.completedTasks?.forEach((taskTitle: string) => { initialChecked[taskTitle] = true; });
        //       setCheckedTasks(initialChecked);
        //    }
        // }
      } catch (fetchError) {
        console.error("Error fetching categorized prompts:", fetchError);
        const message = fetchError instanceof Error ? fetchError.message : "An unexpected error occurred.";
        setError(message); // Set error state for categorized prompts
      } finally {
        setIsLoading(false); // Finish loading categorized prompts
      }
    };

    fetchCategorizedPrompts(); // Call renamed function
    // Dependency array includes only planId (Project ID)
  }, [planId]); // Removed internalCurrentVersionId dependency to avoid re-fetching prompts on version change if planId is stable

  // Function to fetch the One-Shot prompt (called on tab change or button click)
  const fetchOneShotPrompt = async () => {
      if (!planId) { // Check Project ID
          setErrorOneShot("Project ID is missing.");
          return;
      };
      setIsLoadingOneShot(true);
      setErrorOneShot(null);
      setOneShotPrompt(null); // Clear previous prompt

      try {
          // Use the GET endpoint for the project ID
          const response = await fetch(`/api/plans/${planId}/one-shot-prompt`);
          if (!response.ok) {
              let errorData;
              try {
                  errorData = await response.json();
              } catch {
                  errorData = { message: await response.text() };
              }
              throw new Error(errorData.message || `Failed to fetch One-Shot Prompt (${response.status})`);
          }
          const data = await response.json();
          setOneShotPrompt(data.oneShotPrompt); // Can be null if not generated yet
      } catch (fetchError) {
          console.error("Error fetching One-Shot Prompt:", fetchError);
          const message = fetchError instanceof Error ? fetchError.message : "An unknown error occurred.";
          setErrorOneShot(message);
      } finally {
          setIsLoadingOneShot(false);
      }
  }; // Added semicolon

  // Handler for the Refine button
  const handleRefineOneShotPrompt = async () => {
      // Use internalCurrentVersionId if available for context, otherwise rely on planId (Project ID)
      const contextId = internalCurrentVersionId || planId;
      if (!contextId || !oneShotPrompt || !oneShotFeedback.trim()) {
          toast({ title: "Cannot Refine", description: "Missing context ID, existing prompt, or feedback.", variant: "destructive" });
          return;
      }
      setIsRefining(true);
      setErrorOneShot(null);

      try {
          // Use PUT endpoint with Project ID
          const response = await fetch(`/api/plans/${planId}/one-shot-prompt`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                  userFeedback: oneShotFeedback,
                  codeEditor: codeEditor || 'vscode' // Pass code editor preference
              }),
          });

          if (!response.ok) {
              let errorData;
              try {
                  errorData = await response.json();
              } catch {
                  errorData = { message: await response.text() };
              }
              throw new Error(errorData.message || `Failed to refine prompt (${response.status})`);
          }

          const data = await response.json();
          setOneShotPrompt(data.oneShotPrompt); // Update with refined prompt
          setOneShotFeedback(""); // Clear feedback input
          toast({ title: "Prompt Refined", description: "One-Shot Prompt updated successfully." });

      } catch (refineError) {
          console.error("Error refining One-Shot Prompt:", refineError);
          const message = refineError instanceof Error ? refineError.message : "An unknown error occurred.";
          setErrorOneShot(`Refinement failed: ${message}`);
          toast({ title: "Refinement Failed", description: message, variant: "destructive" });
      } finally {
          setIsRefining(false);
      }
  }; // Added semicolon

  // Handler for checkbox changes - Updates state and calls API
  const handleCheckboxChange = async (title: string, isChecked: boolean) => { // Made async
      const newCheckedTasks = {...checkedTasks, [title]: isChecked};
      setCheckedTasks(newCheckedTasks);

      console.log(`Task "${title}" checked: ${isChecked}. PlanVersion ID: ${internalCurrentVersionId}`);

      // Calculate progress and call API
      if (internalCurrentVersionId && prompts) {
          // Calculate total tasks across all categories
          const totalTasks = Object.values(prompts).reduce((acc, categoryArray) => {
              return acc + (Array.isArray(categoryArray) ? categoryArray.length : 0);
          }, 0);
          // Calculate completed tasks based on the new state
          const completedTasks = Object.values(newCheckedTasks).filter(Boolean).length;

          console.log(`Updating progress: ${completedTasks}/${totalTasks}`);

          try {
              const response = await fetch(`/api/plans/${internalCurrentVersionId}/build`, { // Use Plan ID (version)
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                      completedTasks: completedTasks,
                      totalTasks: totalTasks
                  })
              });

              if (!response.ok) {
                  const errorData = await response.text();
                  console.error("Failed to update progress via API:", errorData);
                  toast({ title: "Progress Update Failed", description: `Could not update progress: ${errorData}`, variant: "destructive" });
                  // Optionally revert checkbox state on API failure
                  // setCheckedTasks(prev => ({...prev, [title]: !isChecked}));
              } else {
                   // Optionally trigger a refresh of the progress indicator if needed,
                   // though it might refetch automatically depending on parent component structure.
                   console.log("Progress updated successfully via API.");
              }
          } catch (apiError) {
              console.error("API Error updating progress:", apiError);
              const message = apiError instanceof Error ? apiError.message : "Unknown error";
              toast({ title: "API Error", description: `Failed to update progress: ${message}`, variant: "destructive" });
              // Optionally revert checkbox state on API failure
              // setCheckedTasks(prev => ({...prev, [title]: !isChecked}));
          }
      } else {
          console.warn("Cannot update progress: Missing PlanVersion ID or prompts data.");
      }
  }; // Added semicolon


  const handleCopyToClipboard = (promptText: string) => {
    copy(promptText)
      .then(() => {
        toast({ title: "Copied!", description: "Prompt copied to clipboard." });
      })
      .catch((copyError: unknown) => {
        console.error("Failed to copy to clipboard:", copyError);
        const message = copyError instanceof Error ? copyError.message : "Unknown error";
        toast({ title: "Copy Failed", description: `Could not copy prompt: ${message}`, variant: "destructive" });
      });
  }; // Added semicolon

  const generateCombinedPromptText = (): string => {
    if (!prompts) return "";
    let combined = "";
    for (const category in prompts) {
      // Ensure the property is an array before iterating
      if (prompts[category] && Array.isArray(prompts[category]) && prompts[category].length > 0) {
        combined += `--- ${category.toUpperCase()} ---\n\n`;
        prompts[category].forEach((p: PromptItem) => {
          combined += `## ${p.title}\n\n${p.promptText}\n\n`;
        });
      }
    }
    return combined.trim();
  }; // Added semicolon

  const downloadCombinedPrompt = () => {
    setIsExporting(true);
    try {
      const combinedText = generateCombinedPromptText();
      if (!combinedText) {
        toast({ title: "Nothing to Download", description: "No categorized prompts were found.", variant: "destructive" });
        return;
      }

      const filename = `plan-${planId}-prompts-${Date.now()}.txt`;
      const blob = new Blob([combinedText], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast({ title: "Downloaded", description: "Categorized prompts downloaded as a text file." });
    } catch (downloadError) {
      console.error("Failed to download combined prompt:", downloadError);
      const message = downloadError instanceof Error ? downloadError.message : "Unknown error";
      toast({ title: "Download Failed", description: `Could not download prompts: ${message}`, variant: "destructive" });
    } finally {
      setIsExporting(false);
    }
  }; // Added semicolon

  // Helper to render prompts for a category
  const renderPromptsForCategory = (categoryPrompts: PromptItem[] | undefined) => {
    if (!categoryPrompts || categoryPrompts.length === 0) {
      return <p className="text-muted-foreground">No prompts available for this category.</p>;
    }

    return categoryPrompts.map((prompt, index) => (
      <div key={`${prompt.title}-${index}`} className="rounded-lg border p-4 space-y-2">
        <div className="flex items-center justify-between">
           <div className="flex items-center gap-2">
             {/* Basic Checkbox Implementation */}
             <Checkbox
                id={`task-${prompt.title}-${index}`}
                checked={!!checkedTasks[prompt.title]} // Use component state
                onCheckedChange={(checked) => handleCheckboxChange(prompt.title, !!checked)}
                aria-label={`Mark task "${prompt.title}" as complete`}
             />
             <label htmlFor={`task-${prompt.title}-${index}`} className="font-medium cursor-pointer">
               {prompt.title}
             </label>
           </div>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => handleCopyToClipboard(prompt.promptText)}
                  title="Copy prompt text" // Tooltip text
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Copy prompt text</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <p className="mt-1 text-sm text-muted-foreground whitespace-pre-wrap">{prompt.promptText}</p>
      </div>
    ));
  }; // Added semicolon

  // Determine available categories for tabs (excluding potential non-array properties)
  const categories = prompts ? Object.keys(prompts).filter(cat => prompts[cat] && Array.isArray(prompts[cat]) && prompts[cat].length > 0) : [];
  const defaultTabValue = "one-shot"; // Default to one-shot tab

  // Combine loading states for the main card skeleton
  const isOverallLoading = isLoading; // Base loading on categorized prompts fetch for now

  // Main return structure with Tabs
  return (
    <div className="space-y-6">
      {isOverallLoading ? (
        // Loading State Skeleton
        <Card>
          <CardHeader>
            <Skeleton className="h-6 w-1/2" />
            <Skeleton className="h-4 w-3/4" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-8 w-full" />
            <Skeleton className="h-20 w-full mt-4" />
          </CardContent>
        </Card>
      ) : error ? (
        // Error State Card
        <Card>
          <CardHeader>
            <CardTitle>Build Plan & Prompts</CardTitle>
          </CardHeader>
          <CardContent className="text-red-500">Error loading categorized prompts: {error}</CardContent>
        </Card>
      ) : (
        // Main Content Card (Success State)
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 gap-4">
             <div className="flex-grow">
               <CardTitle>Build Plan & Prompts</CardTitle>
               <CardDescription>Track progress and use AI-generated prompts to implement your plan.</CardDescription>
             </div>
             {internalCurrentVersionId && (
               <div className="w-1/3 min-w-[150px]">
                  <ProgressIndicator planId={internalCurrentVersionId} />
               </div>
             )}
             <TooltipProvider>
               <Tooltip>
                 <TooltipTrigger asChild>
                   <Button
                     variant="outline"
                     size="sm"
                     onClick={downloadCombinedPrompt}
                     disabled={isExporting || categories.length === 0}
                     title="Download all categorized prompts as a single text file"
                   >
                     {isExporting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Download className="mr-2 h-4 w-4" />}
                      Download Prompts
                   </Button>
                 </TooltipTrigger>
                 <TooltipContent>
                   <p>Download all categorized prompts as a single text file</p>
                 </TooltipContent>
               </Tooltip>
             </TooltipProvider>
          </CardHeader>
          <CardContent>
             {/* Check if prompts is null before calculating categories */}
             {prompts !== null ? (
               <Tabs defaultValue={defaultTabValue} className="mt-4" onValueChange={(value) => {
                    // Fetch one-shot prompt when its tab is selected for the first time
                    if (value === 'one-shot' && !oneShotPrompt && !isLoadingOneShot && !errorOneShot) {
                      fetchOneShotPrompt();
                  }
              }}>
                {/* +1 for the One-Shot tab */}
                <TabsList className={`grid w-full grid-cols-${categories.length + 1}`}>
                  {/* One-Shot Tab Trigger */}
                  <TabsTrigger value="one-shot">One-Shot Prompt</TabsTrigger>
                  {/* Categorized Prompt Triggers */}
                  {categories.map(cat => (
                      <TabsTrigger key={cat} value={cat} className="capitalize">{cat}</TabsTrigger>
                  ))}
                </TabsList>

                {/* One-Shot Tab Content */}
                <TabsContent value="one-shot" className="mt-4 space-y-4">
                  {isLoadingOneShot && <Skeleton className="h-40 w-full" />}
                  {errorOneShot && <p className="text-red-500">Error loading One-Shot Prompt: {errorOneShot}</p>}
                  {!isLoadingOneShot && !errorOneShot && (
                      oneShotPrompt ? (
                          <div className="space-y-4">
                               <div className="flex justify-end gap-2">
                                  <TooltipProvider>
                                      <Tooltip>
                                          <TooltipTrigger asChild>
                                              <Button variant="ghost" size="icon" onClick={() => handleCopyToClipboard(oneShotPrompt)}>
                                                  <Copy className="h-4 w-4" />
                                              </Button>
                                          </TooltipTrigger>
                                          <TooltipContent><p>Copy One-Shot Prompt</p></TooltipContent>
                                      </Tooltip>
                                  </TooltipProvider>
                                  {/* TODO: Add Share Button Here Later */}
                                  {/* <Button variant="outline" size="icon"><Share2 className="h-4 w-4" /></Button> */}
                              </div>
                              <Textarea
                                  readOnly
                                  value={oneShotPrompt ?? ''} {/* Handle null case */}
                                  className="min-h-[300px] font-mono text-xs bg-muted/40 border rounded-md p-4"
                                  aria-label="One-Shot Prompt"
                              />
                              {/* Refinement Section */}
                              <div className="border-t pt-4 space-y-2">
                                  <Label htmlFor="one-shot-feedback">Refine Prompt:</Label>
                                  <Textarea
                                      id="one-shot-feedback"
                                      placeholder="Provide feedback to improve the One-Shot Prompt..."
                                      value={oneShotFeedback}
                                      onChange={(e) => setOneShotFeedback(e.target.value)}
                                      className="min-h-[100px]"
                                  />
                                  <Button
                                      onClick={handleRefineOneShotPrompt}
                                      disabled={isRefining || !oneShotFeedback.trim()}
                                  >
                                      {isRefining ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                      Refine Prompt
                                  </Button>
                              </div>
                          </div>
                      ) : (
                          <div className="text-center text-muted-foreground p-6 border rounded-md">
                              <p>One-Shot Prompt has not been generated yet.</p>
                              <Button onClick={fetchOneShotPrompt} disabled={isLoadingOneShot} className="mt-4">
                                  {isLoadingOneShot ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                  Generate One-Shot Prompt
                              </Button>
                          </div>
                      )
                  )}
                </TabsContent>

                {/* Categorized Prompt Tabs Content */}
                {categories.map(cat => {
                   // Assign to variable first to potentially simplify parsing for TS/JSX
                   const categoryPrompts = prompts ? prompts[cat] : undefined;
                   return (
                     <TabsContent key={cat} value={cat} className="mt-4 space-y-4">
                        {/* Pass the variable */}
                        {renderPromptsForCategory(categoryPrompts)}
                     </TabsContent>
                   );
                })}
              </Tabs>
             ) : (
               // Handle case where prompts is null but no overall error (e.g., initial state before fetch completes)
               <p className="text-muted-foreground mt-4">Loading prompt categories...</p>
             )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
